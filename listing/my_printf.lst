     1                                  ;:================================================
     2                                  ;: 0-Linux-nasm-64.s                   (c)Ded,2012
     3                                  ;:================================================
     4                                  
     5                                  ; nasm -f elf64 -l 1-nasm.lst 1-nasm.s  ;  ld -s -o 1-nasm 1-nasm.o
     6                                  
     7                                  section .text
     8                                  
     9                                  %define BUF_POS r15
    10                                  %define FMT_ADR rbx
    11                                  %define SYMBOL  r14b
    12                                  %define CUR_ARG r13
    13                                  %define BUF_SIZE 64
    14                                  
    15                                  ; ------------------------------------------
    16                                  ; Writes to buffer from
    17                                  ;
    18                                  ; Destr: BUF_POS, FMT_ADR
    19                                  ; ------------------------------------------
    20                                  %macro WRITE_TO_BUFFER 0
    21                                          mov byte [Buffer + BUF_POS], SYMBOL
    22                                  
    23                                          inc FMT_ADR
    24                                          inc BUF_POS
    25                                  %endmacro
    26                                  
    27                                  ; ------------------------------------------
    28                                  ; Flushes buffer from buffer
    29                                  ;
    30                                  ; Destr: rax, rdi, rsi, rdx
    31                                  ; ------------------------------------------
    32                                  %macro FLUSH_BUF 0
    33                                          mov rax, 0x01           ; write64 (rdi, rsi, rdx) ... r10, r8, r9
    34                                          mov rdi, 1              ; stdout
    35                                          mov rsi, Buffer
    36                                          mov rdx, 64             ; strlen (Msg)
    37                                          syscall
    38                                  %endmacro
    39                                  
    40                                  global _start                  ; predefined entry point name for ld
    41                                  ; global _Z9my_printfPKcz
    42                                  global my_printf
    43                                  
    44                                  
    45                                  ; ------------------------------------------
    46                                  ; My printf. Arguments by fastcall, fmt in rdi (first)
    47                                  ; ...
    48                                  ; ------------------------------------------
    49                                  
    50                                  ; _Z9my_printfPKcz:
    51                                  my_printf:
    52 00000000 58                              pop  rax              ; save return address
    53 00000001 4151                            push r9
    54 00000003 4150                            push r8
    55 00000005 51                              push rcx
    56 00000006 52                              push rdx
    57 00000007 56                              push rsi
    58 00000008 57                              push rdi
    59 00000009 50                              push rax              ; relocate ret address
    60                                  
    61 0000000A 55                              push rbp
    62 0000000B 4889E5                          mov rbp, rsp
    63                                  
    64 0000000E 4831DB                          xor FMT_ADR, FMT_ADR
    65 00000011 488B5D10                        mov FMT_ADR, [rbp + 16]         ; fmt string
    66 00000015 4D31FF                          xor BUF_POS, BUF_POS            ; r15 - counter of buffer
    67 00000018 41BD03000000                    mov CUR_ARG, 3
    68                                  
    69                                  .parse_char:
    70 0000001E 4D31F6                          xor r14, r14
    71 00000021 448A33                          mov SYMBOL, [FMT_ADR]
    72 00000024 4180FE25                        cmp SYMBOL, '%'
    73 00000028 7419                            je .is_percent
    74 0000002A 4180FE00                        cmp SYMBOL, 0
    75 0000002E 0F842E010000                    je .end_of_parse
    76                                  
    77                                          WRITE_TO_BUFFER                 ; common char
    21 00000034 4588B7[00000000]    <1>  mov byte [Buffer + BUF_POS], SYMBOL
    22                              <1> 
    23 0000003B 48FFC3              <1>  inc FMT_ADR
    24 0000003E 49FFC7              <1>  inc BUF_POS
    78                                  
    79 00000041 EBDB                            jmp .parse_char
    80                                  .is_percent:
    81 00000043 48FFC3                          inc rbx
    82 00000046 448A33                          mov SYMBOL, [rbx]
    83                                  
    84 00000049 4180FE25                        cmp SYMBOL, '%'
    85 0000004D 0F84F6000000                    je .perc_parse
    86                                          ; jump table
    87                                          ; TODO: optimise by sub before cmp`s and then cmp only greater
    88 00000053 4180FE62                        cmp SYMBOL, 'b'
    89 00000057 0F82FB000000                    jb .wrong_symbol
    90 0000005D 4180FE78                        cmp SYMBOL, 'x'
    91 00000061 0F87F1000000                    ja .wrong_symbol
    92                                  
    93 00000067 4180EE62                        sub SYMBOL, 'b'
    94 0000006B 4C89F7                          mov rdi, r14
    95 0000006E FF24FD[75000000]                jmp [.jump_table + rdi * 8]
    96                                  
    97                                  .jump_table:               ; offset of functions for each of char
    98 00000075 [2D01000000000000]              dq .bin_parse      ; b - bin
    99 0000007D [4201000000000000]              dq .chr_parse      ; c - char
   100 00000085 [3B01000000000000]              dq .dec_parse      ; d - digit
   101 0000008D [5801000000000000]-             times ('x' - 'd' - 1) dq .wrong_symbol  ; not anyone
   101 0000008D <rep 13h>          
   102 00000125 [3401000000000000]              dq .hex_parse      ; x - hex
   103                                  
   104                                  .bin_parse:
   105 0000012D E892000000                      call parse_bin
   106 00000132 EB26                            jmp .switch_end
   107                                  
   108                                  .hex_parse:
   109 00000134 E865000000                      call parse_hex
   110 00000139 EB1F                            jmp .switch_end
   111                                  
   112                                  .dec_parse:
   113 0000013B E85E000000                      call parse_hex
   114 00000140 EB18                            jmp .switch_end
   115                                  
   116                                  .chr_parse:
   117 00000142 E844000000                      call parse_char
   118 00000147 EB11                            jmp .switch_end
   119                                  
   120                                  .perc_parse:
   121                                          WRITE_TO_BUFFER
    21 00000149 4588B7[00000000]    <1>  mov byte [Buffer + BUF_POS], SYMBOL
    22                              <1> 
    23 00000150 48FFC3              <1>  inc FMT_ADR
    24 00000153 49FFC7              <1>  inc BUF_POS
   122 00000156 EB02                            jmp .switch_end
   123                                  
   124                                  .wrong_symbol:
   125 00000158 EB08                            jmp .end_of_parse
   126                                  
   127                                  .switch_end:
   128 0000015A 49FFC5                          inc CUR_ARG
   129 0000015D E9BCFEFFFF                      jmp .parse_char
   130                                  
   131                                  .end_of_parse
   131          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
   132                                          FLUSH_BUF
    33 00000162 B801000000          <1>  mov rax, 0x01
    34 00000167 BF01000000          <1>  mov rdi, 1
    35 0000016C 48BE-               <1>  mov rsi, Buffer
    35 0000016E [0000000000000000]  <1>
    36 00000176 BA40000000          <1>  mov rdx, 64
    37 0000017B 0F05                <1>  syscall
   133                                  
   134 0000017D 4889EC                          mov rsp, rbp
   135 00000180 5D                              pop rbp
   136 00000181 488B1C24                        mov rbx, [rsp]
   137 00000185 4883C460                        add rsp, 6 * 16         ; restore stack
   138 00000189 FFE3                            jmp rbx                 ; return
   139                                  
   140                                  parse_char:
   141 0000018B 468A74ED00                      mov SYMBOL, [rbp + CUR_ARG * 8]
   142                                          WRITE_TO_BUFFER
    21 00000190 4588B7[00000000]    <1>  mov byte [Buffer + BUF_POS], SYMBOL
    22                              <1> 
    23 00000197 48FFC3              <1>  inc FMT_ADR
    24 0000019A 49FFC7              <1>  inc BUF_POS
   143 0000019D C3                              ret
   144                                  
   145                                  parse_hex:
   146 0000019E 468A74ED00                      mov SYMBOL, [rbp + CUR_ARG * 8]
   147 000001A3 4588B7[00000000]                mov byte [Buffer + BUF_POS], SYMBOL
   148 000001AA 49FFC7                          inc BUF_POS
   149 000001AD 48FFC3                          inc rbx
   150 000001B0 C3                              ret
   151                                  
   152                                  parse_dec:
   153 000001B1 468A74ED00                      mov SYMBOL, [rbp + CUR_ARG * 8]
   154 000001B6 4588B7[00000000]                mov byte [Buffer + BUF_POS], SYMBOL
   155 000001BD 49FFC7                          inc BUF_POS
   156 000001C0 48FFC3                          inc rbx
   157 000001C3 C3                              ret
   158                                  
   159                                  parse_bin:
   160 000001C4 468A74ED00                      mov SYMBOL, [rbp + CUR_ARG * 8]
   161 000001C9 4588B7[00000000]                mov byte [Buffer + BUF_POS], SYMBOL
   162 000001D0 49FFC7                          inc BUF_POS
   163 000001D3 48FFC3                          inc rbx
   164 000001D6 C3                              ret
   165                                  
   166                                  section     .data
   167 00000000 <res 40h>               Buffer:     resb BUF_SIZE
   167          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
