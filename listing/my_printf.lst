     1                                  ;:================================================
     2                                  ;: 0-Linux-nasm-64.s                   (c)Ded,2012
     3                                  ;:================================================
     4                                  
     5                                  ; nasm -f elf64 -l 1-nasm.lst 1-nasm.s  ;  ld -s -o 1-nasm 1-nasm.o
     6                                  
     7                                  section .text
     8                                  
     9                                  %macro FLUSH_BUF 0
    10                                          mov rax, 0x01      ; write64 (rdi, rsi, rdx) ... r10, r8, r9
    11                                          mov rdi, 1         ; stdout
    12                                          mov rsi, Buffer
    13                                          mov rdx, 64    ; strlen (Msg)
    14                                          syscall
    15                                  %endmacro
    16                                  
    17                                  global _start                  ; predefined entry point name for ld
    18                                  ; global _Z9my_printfPKcz
    19                                  global my_printf
    20                                  
    21                                  ; _Z9my_printfPKcz:
    22                                  my_printf:
    23 00000000 58                              pop  rax              ; save return address
    24 00000001 4151                            push r9
    25 00000003 4150                            push r8
    26 00000005 51                              push rcx
    27 00000006 52                              push rdx
    28 00000007 56                              push rsi
    29 00000008 57                              push rdi
    30 00000009 50                              push rax              ; relocate ret address
    31                                  
    32 0000000A 55                              push rbp
    33 0000000B 4889E5                          mov rbp, rsp
    34                                  
    35 0000000E 4831DB                          xor rbx, rbx
    36 00000011 488B5D10                        mov rbx, [rbp + 16]     ; fmt string
    37 00000015 4D31FF                          xor r15, r15            ; r15 - counter of buffer
    38                                  
    39                                  .parse_char:
    40 00000018 4D31F6                          xor r14, r14
    41 0000001B 448A33                          mov r14b, [rbx]
    42 0000001E 4180FE25                        cmp r14b, '%'
    43 00000022 7415                            je .is_percent
    44 00000024 4180FE00                        cmp r14b, 0
    45 00000028 7411                            je .end_of_parse
    46                                  
    47 0000002A 4588B7[00000000]                mov byte [Buffer + r15], r14b
    48                                  
    49 00000031 48FFC3                          inc rbx
    50 00000034 49FFC7                          inc r15
    51                                  
    52 00000037 EBDF                            jmp .parse_char
    53                                  .is_percent:
    54                                          ; parse
    55 00000039 EBDD                            jmp .parse_char
    56                                  
    57                                  .end_of_parse
    57          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
    58                                          FLUSH_BUF
    10 0000003B B801000000          <1>  mov rax, 0x01
    11 00000040 BF01000000          <1>  mov rdi, 1
    12 00000045 48BE-               <1>  mov rsi, Buffer
    12 00000047 [0000000000000000]  <1>
    13 0000004F BA40000000          <1>  mov rdx, 64
    14 00000054 0F05                <1>  syscall
    59                                  
    60 00000056 4889EC                          mov rsp, rbp
    61 00000059 5D                              pop rbp
    62 0000005A 488B1C24                        mov rbx, [rsp]
    63 0000005E 4883C460                        add rsp, 6 * 16         ; restore stack
    64 00000062 FFE3                            jmp rbx                 ; return
    65                                  
    66                                  
    67                                  
    68                                  flush_buf:
    69                                  
    70                                  section     .data
    71                                  
    72 00000000 <res 40h>               Buffer:     resb 64
    72          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing [-w+zeroing]
    73 00000040 48656C6C6F20576F72-     Msg:        db "Hello World", 0x0a
    73 00000049 6C640A             
    74                                  MsgLen      equ $ - Msg
